---
title: Data Generating Sites Portal
subtitle: Upload Documents
---

Please zip your ARES Index directory upload them here.

```{=html}
<script>
  function formatFileName(name) {
    return name.length <= 50 ? name : `${name.slice(0, 40)} \u2026 ${name.slice(-10)}`;
  }

  function formatFileSize(size) {
    if (size == 1) {
      return "1 byte"
    }
    else if (size < 1024) {
      return `${size} bytes`;
    }
    else if (1024 <= size && size < 1048576) {
      return `${(size / 1024).toFixed(1)} kB`;
    }
    else {
      return `${(size / 1048576).toFixed(1)} MB`;
    }
  }

  function formatFileDate(time) {
    return (new Date(time)).toLocaleString("en-US");
  }

  document.addEventListener("alpine:init", () => {
    Alpine.data("data", () => ({
      busy: false,
      localFiles: [],
      remoteFiles: [],
      selections: [],
      latestError: null,

      init() {
        this.refreshRemoteFiles();
      },

      hasLocalFiles() {
        return this.localFiles.length > 0;
      },

      appendLocalFiles(files) {
        let combinedFiles = this.localFiles.concat(files);
        this.localFiles = combinedFiles.filter((localFile, index) =>
          combinedFiles.findLastIndex((file) => file.name == localFile.name) <= index);
      },

      clearLocalFiles() {
        this.localFiles = [];
      },

      hasRemoteFiles() {
        return this.remoteFiles.length > 0;
      },

      hasSelections() {
        return this.selections.length > 0;
      },

      isSelectedAll() {
        return 0 < this.selections.length && this.selections.length == this.remoteFiles.length;
      },

      selectAll() {
        if (this.isSelectedAll()) {
          this.selections = [];
        }
        else {
          this.selections = this.remoteFiles.map((file) => file.name);
        }
      },

      refreshRemoteFiles() {
        this.busy = true;
        let p = Promise.resolve(null);
        p = p.then(() => fetch("/uploads/"));
        p = p.then((response) => response.ok ? response.json() : Promise.reject(Error(response.statusText)) );
        p = p.then((json) => {
          this.remoteFiles = json.result;
          this.selections = this.selections.filter((selection) =>
            this.remoteFiles.some((remoteFile) => remoteFile.name == selection));
        });
        p = p.catch((e) => this.latestError = e);
        p = p.finally(() => this.busy = false);
        return p;
      },

      deleteSelectedRemoteFiles() {
        this.busy = true;
        let p = Promise.resolve(null);
        this.selections.forEach((selection) => {
          p = p.then(() => fetch(`/uploads/${selection}`, { method: "DELETE" }));
          p = p.then((response) => response.ok ? response.json() : Promise.reject(Error(response.statusText)) );
          p = p.then((json) => {
            this.remoteFiles = json.result;
            this.selections = this.selections.filter((selection) =>
              this.remoteFiles.some((remoteFile) => remoteFile.name == selection));
          });
        });
        p = p.catch((e) => this.latestError = e);
        p = p.finally(() => this.busy = false);
        return p;
      },

      uploadLocalFiles() {
        this.busy = true;
        let p = Promise.resolve(null);
        this.localFiles.forEach((localFile) => {
          p = p.then(() => fetch(`/uploads/${localFile.name}`, { method: "PUT", body: localFile }));
          p = p.then((response) => response.ok ? response.json() : Promise.reject(Error(response.statusText)) );
          p = p.then((json) => {
            this.localFiles = this.localFiles.slice(1);
            this.remoteFiles = json.result;
            this.selections = this.selections.filter((selection) =>
              this.remoteFiles.some((remoteFile) => remoteFile.name == selection));
          });
        });
        p = p.catch((e) => this.latestError = e);
        p = p.finally(() => this.busy = false);
        return p;
      },

      resetError() {
        this.latestError = null;
      },
    }));
  });
</script>

<div
  x-cloak
  x-data="data"
  :style="{ cursor: busy && 'wait' }">

  <template x-if="latestError">
    <div
      class="toast-container position-fixed bottom-0 end-0 p-3">
      <div
        class="toast align-items-center text-white bg-danger border-0"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
        x-effect="if (latestError) { bootstrap.Toast.getOrCreateInstance($el).show() }">
        <div class="d-flex">
          <div class="toast-body" x-text="latestError.message"></div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    </div>
  </template>

  <div
    class="card"
    @drop.prevent="appendLocalFiles(Array.from($event.dataTransfer.files))"
    @dragover.prevent="false">
    <div class="card-body vstack gap-3 text-center">
      <span class="p-1"><i class="bi bi-upload"></i></span>
      <span class="p-1">Drag and drop files here</span>
      <span class="p-1">or</span>
      <span class="p-1">
        <input
          type="file"
          multiple
          style="display: none"
          x-ref="fileInput"
          x-init="$el.value = ''"
          @change="appendLocalFiles(Array.from($el.files)); $el.value = ''" />
        <button
          type="button"
          class="btn btn-outline-secondary"
          :disabled="busy"
          @click="$refs.fileInput.click()">
          Browse&hellip;
        </button>
      </span>
    </div>
    <table
      class="table table-sm table-striped table-borderless mb-0"
      x-show="hasLocalFiles()">
      <thead>
        <tr><th>Name</th><th>Size</th><th>Modified</th></tr>
      </thead>
      <tbody>
        <template x-for="file in localFiles" :key="file.name">
          <tr>
            <td :title="file.name" x-text="formatFileName(file.name)" />
            <td x-text="formatFileSize(file.size)" />
            <td x-text="formatFileDate(file.lastModified)" />
          </tr>
        </template>
      </tbody>
    </table>
  </div>
  <div class="btn-toolbar mb-3">
    <div class="btn-group me-2">
      <button
        type="button"
        class="btn btn-primary"
        disabled
        :disabled="busy || !hasLocalFiles()"
        @click="uploadLocalFiles()">
        Upload
      </button>
    </div>
    <div class="btn-group">
      <button
        type="button"
        class="btn btn-secondary"
        :disabled="busy || !hasLocalFiles()"
        @click="clearLocalFiles()">
        Clear
      </button>
    </div>
  </div>

  <p>Below you will find the files that you have previously uploaded.</p>

  <div class="card">
    <div
      class="card-body text-center"
      x-show="!hasRemoteFiles()">
      <span class="p-1"><i>No uploaded files</i></span>
    </div>
    <table
      class="table table-sm table-striped table-borderless mb-0"
      x-show="hasRemoteFiles()">
      <thead>
        <tr>
          <th>
            <input
              type="checkbox"
              class="form-check-input"
              :disabled="busy"
              :checked="isSelectedAll()"
              @click="selectAll()" />
          </th>
          <th>Name</th>
          <th>Size</th>
          <th>Uploaded</th>
        </tr>
      </thead>
      <tbody>
        <template x-for="file in remoteFiles" :key="file.name">
          <tr>
            <td>
              <input
                type="checkbox"
                class="form-check-input"
                x-model="selections"
                :disabled="busy"
                :value="file.name" />
            </td>
            <td :title="file.name" x-text="formatFileName(file.name)" />
            <td x-text="formatFileSize(file.size)" />
            <td x-text="formatFileDate(file.time)" />
          </tr>
        </template>
      </tbody>
    </table>
  </div>
  <div class="btn-toolbar mb-3">
    <div class="btn-group me-2">
      <button
        class="btn btn-secondary"
        :disabled="busy"
        @click="refreshRemoteFiles()">
        Refresh
      </button>
    </div>
    <div class="btn-group">
      <button
        class="btn btn-danger"
        disabled
        :disabled="busy || !hasSelections()"
        @click="deleteSelectedRemoteFiles()">
        Delete
      </button>
    </div>
  </div>

</div>
```

Go back to the **[front page](index.qmd)**.
