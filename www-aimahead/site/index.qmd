---
title: AIM-AHEAD Portal
subtitle: CHoRUS Azure Data Enclave
format: html
---

<style>
    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap');

    body {
        font-family: 'Open Sans', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #fdfdff;
        opacity: 1;
        background-image: linear-gradient(30deg, #f7f7fe 12%, transparent 12.5%, transparent 87%, #f7f7fe 87.5%, #f7f7fe),
                          linear-gradient(150deg, #f7f7fe 12%, transparent 12.5%, transparent 87%, #f7f7fe 87.5%, #f7f7fe),
                          linear-gradient(30deg, #f7f7fe 12%, transparent 12.5%, transparent 87%, #f7f7fe 87.5%, #f7f7fe),
                          linear-gradient(150deg, #f7f7fe 12%, transparent 12.5%, transparent 87%, #f7f7fe 87.5%, #f7f7fe),
                          linear-gradient(60deg, #f7f7fe77 25%, transparent 25.5%, transparent 75%, #f7f7fe77 75%, #f7f7fe77),
                          linear-gradient(60deg, #f7f7fe77 25%, transparent 25.5%, transparent 75%, #f7f7fe77 75%, #f7f7fe77);
        background-size: 50px 88px;
        background-position: 0 0, 0 0, 25px 44px, 25px 44px, 0 0, 25px 44px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 10px;
    }

    header {
        background-color: #00274D;
        color: #ffffff;
        padding: 20px;
        text-align: center;
        border-bottom: 4px solid #FFA500;
    }

    header h1 {
        margin: 0;
        font-size: 2.2em;
    }

    header h2 {
        margin: 0;
        font-size: 1.3em;
        font-weight: 300;
    }

    .section {
        margin: 20px 0;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .cta {
        display: inline-block;
        padding: 8px 15px;
        background-color: #FFA500;
        color: #ffffff;
        border-radius: 5px;
        text-decoration: none;
        font-weight: bold;
        float: right;
        margin-bottom: 10px;
    }

    .cta:hover {
        background-color: #cc8400;
    }

    footer {
        background-color: #00274D;
        color: #ffffff;
        text-align: center;
        padding: 15px 0;
        margin-top: 30px;
    }

    a {
        color: #FFA500;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }

    .warmup-container {
        margin-top: 12px;
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .warmup-btn {
        display: inline-block;
        padding: 8px 15px;
        background-color: #FFA500;
        color: #ffffff;
        border-radius: 5px;
        text-decoration: none;
        font-weight: bold;
        cursor: pointer;
        border: none;
        font-size: 0.9rem;
        transition: background-color 0.2s;
    }

    .warmup-btn:hover {
        background-color: #cc8400;
    }

    .warmup-btn:disabled {
        background-color: #999;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .warmup-status {
        font-size: 0.85rem;
        color: #00274D;
        font-weight: bold;
        display: none;
    }

    .warmup-status.active {
        display: inline-block;
    }

    .cta.disabled {
        background-color: #999;
        cursor: not-allowed;
        opacity: 0.6;
        pointer-events: none;
    }

    .cta.ready {
        background-color: #28a745;
        animation: pulse 1s ease-in-out infinite;
    }

    @keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: 0.7;
        }
    }
</style>

<script>
class AppWarmer {
  constructor(appId, endpoint, warmupTime = 30000) {
    this.appId = appId;
    this.endpoint = endpoint;
    this.warmupTime = warmupTime;
    this.isWarming = false;
    this.warmupBtn = document.getElementById(`warmup-${appId}`);
    this.statusSpan = document.getElementById(`status-${appId}`);
    this.mainLink = document.getElementById(`link-${appId}`);

    this.warmupBtn?.addEventListener('click', () => this.startWarmup());
  }

  async startWarmup() {
    if (this.isWarming) return;

    this.isWarming = true;
    this.warmupBtn.disabled = true;
    this.warmupBtn.textContent = 'Starting...';
    this.statusSpan.classList.add('active');

    // Start countdown
    let remaining = Math.ceil(this.warmupTime / 1000);
    this.statusSpan.textContent = `Warming up: ${remaining}s`;

    const countdown = setInterval(() => {
      remaining--;
      if (remaining > 0) {
        this.statusSpan.textContent = `Warming up: ${remaining}s`;
      }
    }, 1000);

    // Ping the endpoint to wake it up - send multiple pings to ensure scale-up
    try {
      // Initial ping
      fetch(this.endpoint, { method: 'HEAD', mode: 'no-cors' }).catch(() => {});

      // Additional pings every 5 seconds to maintain pressure
      const pingInterval = setInterval(() => {
        fetch(this.endpoint, { method: 'HEAD', mode: 'no-cors' }).catch(() => {});
      }, 5000);

      // Clear ping interval when warmup completes
      setTimeout(() => clearInterval(pingInterval), this.warmupTime);
    } catch (e) {
      // Ignore errors - we just want to trigger the scale-up
    }

    // Wait for warmup period
    setTimeout(() => {
      clearInterval(countdown);
      this.statusSpan.textContent = 'Ready!';
      this.mainLink.classList.remove('disabled');
      this.mainLink.classList.add('ready');
      this.warmupBtn.textContent = 'Warmed Up';

      setTimeout(() => {
        this.statusSpan.classList.remove('active');
        this.isWarming = false;
      }, 3000);
    }, this.warmupTime);
  }
}

// Initialize warmers after page loads
document.addEventListener('DOMContentLoaded', () => {
  new AppWarmer('lab', '/lab/', 40000);
});
</script>

<div class="container">

<section class="section" id="tools">
    <h2>Explore Our Tools and Services</h2>

    <h3><a href="/lab/">User-Specific Environment</a></h3>
    <p>Access the ML workspace provisioned for the AimAhead Project.</p>
    <ul>
        <li><strong>Secure Access:</strong> A jump-host-like Firefox browser ensures safe and controlled access.</li>
        <li><strong>Integrated Tools:</strong> Access ARES, ATLAS, and other resources through bookmarks in this environment.</li>
    </ul>
    <p>‚ÑπÔ∏è Your environment may take a few seconds to initialize on first access.</p>
    <p>‚ÑπÔ∏è This link will only work within the private CHoRUS network.</p>
    <a href="/lab/" class="cta">Get Started</a>
    </br>
    </br>
</section>

<section class="section" id="report-issues">
    <h2>Report Issues</h2>
    <p>If you encounter any issues while using the AimAhead Portal, please report them on our GitHub repository:</p>
    <p><a href="https://github.com/orgs/chorus-ai/discussions/new?category=issues" target="_blank">üîó Report an Issue</a></p>
</section>

</div>

<footer>
    <p>¬© 2025 AIM-AHEAD CHoRUS Portal. All rights reserved.</p>
    <p><a href="mailto:chorus@b2ai.com">Contact Support</a></p>
</footer>
